export { TraceEngineResultComputed as TraceEngineResult };
declare const TraceEngineResultComputed: typeof TraceEngineResult & {
    request: (dependencies: {
        trace: LH.Trace;
    }, context: import("../../types/utility-types.js").default.ImmutableObject<{
        computedCache: Map<string, import("../lib/arbitrary-equality-map.js").ArbitraryEqualityMap>;
    }>) => Promise<{
        LayoutShifts: {
            clusters: {
                events: import("../../types/trace-engine.js").LayoutShiftTraceEvent[];
            }[];
            sessionMaxScore: number;
        };
    }>;
};
/**
 * @fileoverview Processes trace with the shared trace engine.
 */
declare class TraceEngineResult {
    /**
     * @param {LH.TraceEvent[]} traceEvents
     */
    static runTraceEngine(traceEvents: LH.TraceEvent[]): Promise<{
        LayoutShifts: {
            clusters: {
                events: import("../../types/trace-engine.js").LayoutShiftTraceEvent[];
            }[];
            sessionMaxScore: number;
        };
    }>;
    /**
     * @param {{trace: LH.Trace}} data
     * @param {LH.Artifacts.ComputedContext} context
     * @return {Promise<LH.Artifacts.TraceEngineResult>}
     */
    static compute_(data: {
        trace: LH.Trace;
    }, context: LH.Artifacts.ComputedContext): Promise<LH.Artifacts.TraceEngineResult>;
}
//# sourceMappingURL=trace-engine-result.d.ts.map